{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","username","email","className","src","alt","CardList","robots","map","robot","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","borderTop","borderBottom","height","ErrorBoundary","props","state","hasError","error","errorInfo","this","setState","Component","CHANGE_SEARCH_FIELD","connect","searchField","dispatch","onSearchChange","event","text","target","value","payload","useState","robotList","setRobotList","filteredRobots","filter","toLowerCase","includes","useEffect","fetch","then","response","json","users","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.08fda29b.chunk.js","sourcesContent":["const Card = ({ name, username, email }) => {\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img src={`https://robohash.org/${username}?size=200x200`} alt='robot' />\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h2 className=\"mb2\">{name}</h2>\n\t\t\t\t<p className=\"ma1\">{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import Card from './Card';\n\nconst CardList = ({ robots }) => {\n\t// if (true) {\n\t// \tthrow new Error('NOOOOOO!');\n\t// }\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map(robot => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={robot.id}\n\t\t\t\t\t\t\tid={robot.id}\n\t\t\t\t\t\t\tname={robot.name}\n\t\t\t\t\t\t\tusername={robot.username}\n\t\t\t\t\t\t\temail={robot.email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","const SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","const Scroll = ({ children }) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', borderTop: '1px solid black', borderBottom: '1px solid black', height: '800px' }}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { hasError: false }\n\t}\n\n\tcomponentDidCatch(error, errorInfo) {\n\t\tthis.setState({ hasError: true });\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn (\n\t\t\t\t<h1>Oooops. That is not good.</h1>\n\t\t\t);\n\t\t}\n\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchField\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value))\n\t}\n}\n\nfunction App(props) {\n\tconst [ robotList, setRobotList ] = useState([]);\n\tconst { searchField, onSearchChange } = props;\n\n\tconst filteredRobots = robotList.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t});\n\n\tuseEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => setRobotList(users));\n\t}, []);\n\n\treturn (!robotList.length) ?\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<p>Loading...</p>\n\t\t\t</div>\n\t\t)\n\t\t:\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants.js';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD } from './constants.js';\n\nconst initialState = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state = initialState, action = {}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots } from './reducers';\n\nconst logger = createLogger();\nconst store = createStore(searchRobots, applyMiddleware(logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}